name: Create NuGet Package and Release

on:
  push:
    tags:
      - 'v*'  # Ejecutar cuando se cree un tag con formato v1.0.0, v2.1.3, etc.

env:
  DOTNET_VERSION: '8.0.x'
  PROJECT_PATH: 'DictApp/'
  CONFIGURATION: 'Release'
  GITHUB_PACKAGES_URL: 'https://nuget.pkg.github.com/marant7/index.json'

jobs:
  build-and-pack:
    runs-on: windows-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Necesario para obtener todo el historial para las notas de la release

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Get version from tag
        id: get_version
        shell: powershell
        run: |
          $tag = "${{ github.ref_name }}"
          $version = $tag.Substring(1)  # Eliminar la 'v' inicial
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "Versión extraída: $version"

      - name: Restore dependencies
        run: dotnet restore ${{ env.PROJECT_PATH }}DataDictGen.sln

      - name: Build solution
        run: dotnet build ${{ env.PROJECT_PATH }}DataDictGen.sln --configuration ${{ env.CONFIGURATION }} --no-restore

      - name: Run tests
        run: dotnet test ${{ env.PROJECT_PATH }}DataDictGen.sln --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal

      # Generar paquetes NuGet para cada proyecto (excluyendo Tests y Frontend)
      - name: Pack Application
        run: dotnet pack ${{ env.PROJECT_PATH }}DataDicGen.Application/DataDicGen.Application.csproj --configuration ${{ env.CONFIGURATION }} --no-build --output ./nupkgs -p:PackageVersion=${{ steps.get_version.outputs.VERSION }}
      
      - name: Pack Domain
        run: dotnet pack ${{ env.PROJECT_PATH }}DataDicGen.Domain/DataDicGen.Domain.csproj --configuration ${{ env.CONFIGURATION }} --no-build --output ./nupkgs -p:PackageVersion=${{ steps.get_version.outputs.VERSION }}
      
      - name: Pack Infrastructure
        run: dotnet pack ${{ env.PROJECT_PATH }}DataDicGen.Infrastructure/DataDicGen.Infrastructure.csproj --configuration ${{ env.CONFIGURATION }} --no-build --output ./nupkgs -p:PackageVersion=${{ steps.get_version.outputs.VERSION }}
      
      - name: Pack WebAPI
        run: dotnet pack ${{ env.PROJECT_PATH }}DataDicGen.WebAPI/DataDicGen.WebAPI.csproj --configuration ${{ env.CONFIGURATION }} --no-build --output ./nupkgs -p:PackageVersion=${{ steps.get_version.outputs.VERSION }}

      # Subir artefactos de NuGet
      - name: Upload NuGet packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./nupkgs/*.nupkg

      # Publicar en GitHub Packages
      - name: Setup NuGet for GitHub Packages
        run: |
          dotnet nuget add source ${{ env.GITHUB_PACKAGES_URL }} --name github --username marant7 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text

      - name: Publish to GitHub Packages
        run: |
          foreach($file in Get-ChildItem -Path "./nupkgs/*.nupkg") {
            dotnet nuget push $file --source github --api-key ${{ secrets.GITHUB_TOKEN }}
          }

      # Generar Release Notes automáticas
      - name: Generate Release Notes
        id: release_notes
        shell: powershell
        run: |
          $previous_tag = $(git describe --tags --abbrev=0 HEAD^ 2>$null) 
          if (-not $previous_tag) {
            $release_notes = "## Cambios en esta versión`n`n" + (git log --pretty=format:"* %s (%h)" ${{ github.ref_name }})
          } else {
            $release_notes = "## Cambios desde $previous_tag`n`n" + (git log --pretty=format:"* %s (%h)" $previous_tag..${{ github.ref_name }})
          }
          # Sanitizar multiline string para GitHub Actions
          $release_notes = $release_notes -replace "`n", "%0A"
          echo "NOTES=$release_notes" >> $env:GITHUB_OUTPUT

      # Crear una GitHub Release
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: ${{ steps.release_notes.outputs.NOTES }}
          draft: false
          prerelease: false
          files: ./nupkgs/*.nupkg
        env:
          GITHUB_TOKEN: ${{ secrets.G_TOKEN }}
