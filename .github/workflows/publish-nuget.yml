name: Build, Test and Publish NuGet Package

on:
  push:
    branches:
      - main
  pull_request:
  # También permitir ejecución manual
  workflow_dispatch:

jobs:
  build-test-publish:
    runs-on: ubuntu-latest
    name: CI Pipeline - DataDicGen

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restaurar dependencias
        run: dotnet restore DictApp/DataDictGen.sln

      - name: Compilar solución
        run: dotnet build DictApp/DataDictGen.sln --configuration Release

      - name: Ejecutar tests
        run: |
          dotnet test DictApp/DataDictGen.Tests/DataDictGen.Tests.csproj \
            --configuration Release \
            --no-build \
            --collect:"XPlat Code Coverage"

      - name: Instalar ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generar reporte de cobertura
        run: |
          export PATH="$PATH:$HOME/.dotnet/tools"
          reportgenerator \
            -reports:"**/coverage.cobertura.xml" \
            -targetdir:CoverageReport \
            -reporttypes:Html

      - name: Subir resultados de tests
        uses: actions/upload-artifact@v4
        with:
          name: resultados-tests
          path: '**/TestResults'

      - name: Subir reporte de cobertura
        uses: actions/upload-artifact@v4
        with:
          name: reporte-cobertura
          path: CoverageReport

      - name: Empaquetar proyectos NuGet
        run: |
          mkdir -p ./nuget
          dotnet pack DictApp/DataDicGen.Domain/DataDicGen.Domain.csproj --configuration Release --output ./nuget
          dotnet pack DictApp/DataDicGen.Application/DataDicGen.Application.csproj --configuration Release --output ./nuget
          dotnet pack DictApp/DataDicGen.Infrastructure/DataDicGen.Infrastructure.csproj --configuration Release --output ./nuget
          dotnet pack DictApp/DataDicGen.WebAPI/DataDicGen.WebAPI.csproj --configuration Release --output ./nuget

      - name: Configurar NuGet para GitHub Packages
        run: |
          dotnet nuget add source https://nuget.pkg.github.com/marant7/index.json --name github --username marant7 --password ${{ secrets.GITHUB_TOKEN }} --store-password-in-clear-text

      - name: Publicar en GitHub Packages
        run: |
          dotnet nuget push "./nuget/*.nupkg" --source "github" --api-key "${{ secrets.GITHUB_TOKEN }}" --skip-duplicate

      - name: Subir paquetes NuGet como artefactos
        uses: actions/upload-artifact@v4
        with:
          name: paquetes-nuget
          path: ./nuget/*.nupkg